<?php
namespace app\modules\Admin\Custom\models;
use app\modules\Admin\Articles\models\ClassesDaily;
use app\modules\Admin\Articles\models\CustomsDaily;
use app\modules\Admin\Classes\models\Classes;
use app\modules\Admin\School\models\Schools;
use app\modules\AppBase\base\appbase\base\BaseEdit;
use app\modules\AppBase\base\appbase\base\BaseMain;
use app\modules\AppBase\base\appbase\BaseAnalyze;
use app\modules\AppBase\base\appbase\TransAct;
use app\modules\AppBase\base\authen\Authen;
use app\modules\AppBase\base\cat_def\CatDef;
use app\modules\AppBase\base\CommonFun;
use app\modules\AppBase\base\CustomInfo;
use app\modules\AppBase\base\HintConst;
use app\modules\AppBase\base\otheraccess\OtherAccess;
use Exception;
use Yii;
use yii\data\Pagination;
use yii\db\Query;
/**
 * This is the model class for table "customs".
 * @property integer $id
 * @property integer $school_id
 * @property integer $class_id
 * @property integer $cat_default_id
 * @property integer $catalogue_des_id
 * @property string $name
 * @property string $name_zh
 * @property string $nickname
 * @property string $logo
 * @property string $password
 * @property string $rftoken
 * @property string $token
 * @property string $tel
 * @property string $phone
 * @property string $ip
 * @property string $ip_last
 * @property integer $ispassed
 * @property integer $isdeleted
 * @property integer $isout
 * @property string $createtime
 * @property string $starttime
 * @property string $endtime
 */
class Customs extends BaseMain
{
    private $sel_customlist = 'cu.id,cu.school_id,cu.class_id,cu.position_id,
            cu.cat_default_id,cu.name_zh,cu.logo,cu.description,cu.rftoken,
            cu.token_type,cu.token,cu.phone,cu.iscansend,cu.redflower';
    private $sel_headlist = 'cu.id,cu.school_id,cu.class_id,cu.position_id,
            cu.cat_default_id,cu.name_zh,cu.logo,cu.description,cu.rftoken,
            cu.token_type,cu.token,cu.phone,cu.iscansend,cu.redflower';
    private $sel_cus = 'id,school_id,class_id,catalogue_des_id,name_zh';
    private $sel_flower = 'gf,redflower as rf';
    private $sel_push = 'id,school_id,class_id,cat_default_id,token_type,token,name_zh';
    private $sel_score_h = 'customs.id,customs.name_zh,schools.name as school_name,customs.points,customs.coins';
    private $sel_score_t_p = 'customs.id,customs.name_zh,classes.name as class_name,customs.points,customs.coins';
    private $custominfo;
    public static function tableName()
    {
        return 'customs';
    }
    /**
     * @inheritdoc
     */
    public function __construct($config = [])
    {
        parent::__construct($config); // TODO: Change the autogenerated stub
        $this->custominfo = new CustomInfo();
    }
    public function rules()
    {
        return [
            [['name_zh', 'password', 'phone'], 'required'],
            [['phone', 'school_id', 'class_id', 'cat_default_id', 'catalogue_des_id', 'ispassed', 'isdeleted', 'isout', 'iscansend', 'isstar'], 'integer'],
            [['description', 'ip', 'ip_last', 'logo', 'name', 'name_zh', 'nickname', 'password', 'rftoken', 'token', 'tel', 'phone', 'school_id', 'class_id', 'cat_default_id', 'catalogue_des_id', 'ispassed', 'isdeleted', 'isout', 'iscansend', 'isstar', 'createtime', 'updatetime', 'starttime', 'endtime'], 'safe'],
            [['name', 'name_zh', 'nickname', 'password', 'rftoken', 'token', 'tel'], 'string', 'max' => 70],
            [['logo'], 'string', 'max' => 255],
            [['description'], 'string', 'max' => 500],
            [['ip', 'ip_last'], 'string', 'max' => 20],
            [['phone'], 'string', 'max' => 11]
        ];
    }
    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'school_id' => '请选择学校',
            'class_id' => '请选择班级',
            'cat_default_id' => '您是',
            'catalogue_des_id' => '描述',
            'name' => '英文姓名',
            'name_zh' => '中文姓名',
            'nickname' => '昵称',
            'logo' => 'Logo',
            'password' => '密码',
            'rftoken' => 'rfToken',
            'token' => 'Token',
            'tel' => '座机',
            'phone' => '手机',
            'description' => '描述',
            'ip' => 'Ip地址',
            'ip_last' => '最近访问Ip地址',
            'createtime' => HintConst::$CREAT . HintConst::$TIME,
            'updatetime' => HintConst::$UPDATE . HintConst::$TIME,
            'starttime' => HintConst::$START . HintConst::$TIME,
            'endtime' => HintConst::$END . HintConst::$TIME,
            'ispassed' => HintConst::$AUDIT,
            'isdeleted' => HintConst::$IS . HintConst::$DELETE,
            'isout' => HintConst::$IS . HintConst::$OUT,
        ];
    }
    public static function myfindid($id)
    {
        $mo = Customs::findOne(['id' => $id]);
        return $mo;
    }
    public function  getClasses()
    {
        return $this->hasOne(Classes::className(), ['id' => 'class_id']);
    }
    public function getCustomListBySchoolid($school_id)//封装成array
    {
        //和classes联合查询,如何毕业了,该班内的学生不在列表之内
        $query = Customs::find()->where([HintConst::$Field_school_id => $school_id, HintConst::$Field_isdeleted => HintConst::$YesOrNo_NO])->all();
        return parent::getArray2No_Password($query);
    }
    public function getCustomListBySchoolid_M($school_id)
    {
        $query = Customs::find()->where([HintConst::$Field_school_id => $school_id, HintConst::$Field_isdeleted => HintConst::$YesOrNo_NO])->all();
        return $query;
    }
    public function getCustomListBySchoolid2($school_id)//封装成array
    {
        //和classes联合查询,如何毕业了,该班内的学生不在列表之内
//        $customList=$this->getCustomListBySchoolid_M(1);
//        $query = $customList->all();
//        $custom=Customs::findOne(55);
//        $classes=$custom->getClasses();
//        var_dump($custom);
//        exit;
////        $query = Customs::find()->where([HintConst::$Field_school_id => $school_id, HintConst::$Field_isdeleted => HintConst::$YesOrNo_NO])->all();
//        return parent::getArray2No_Password($query);
    }
    public function setCustomInfo($custom, $onepoint)
    {
        foreach ($custom as $k => $v) {
            $this->custominfo->getCustom()->$k = $v;
        }
        $this->custominfo->getCustom()->name_zh = $onepoint->info->custom->name_zh;
        $this->custominfo->getCustom()->phone = $onepoint->info->custom->phone;
        $this->custominfo->getCustom()->password = $onepoint->info->custom->password;
        $this->custominfo->getCustom()->logo = HintConst::$WEB_USER . $onepoint->info->custom->logo;
        $this->custominfo->getCustom()->description = $onepoint->info->custom->description;
        $this->custominfo->getCustom()->sfkey = $onepoint->sfkey;
        $school = (new Schools())->findId($custom['school_id']);
        $this->custominfo->getCustom()->zh_province_id = $school->zh_province_id;
        $this->custominfo->getCustom()->zh_citie_id = $school->zh_citie_id;
        $this->custominfo->getCustom()->zh_district_id = $school->zh_district_id;
        return $this->custominfo;
    }
    private function getAuthKeyById($id)
    {
        return $id;
    }
    public function getCustomByIP($id, $password)
    {
        return Customs::find()->where(['id' => $id, 'password' => $password])->one();
    }
    public function getCustomByPP($phone, $password)
    {//todo:要检测school是否通过,删除,out,只有检测通过之后才能继续验证custom
//        $password = CommonFun::encrypt($password);
        $yes = HintConst::$YesOrNo_YES;
        $no = HintConst::$YesOrNo_NO;
        $query = new Query();
        $custom = $query
            ->from('customs as c')
            ->where("c.phone='$phone' and c.password='$password' and s.ispassed=$yes and s.isdeleted=$no and s.isout=$no")
            ->leftJoin('schools as s', 's.id=c.school_id')
            ->one();
        if ($custom == false) {
            return null;
        } else {
            return Customs::find()->where(['phone' => $phone, 'password' => $password])->one();
        }
    }
    public static function getCustomByPhone($phone)
    {
        return Customs::find()->where(['phone' => $phone])->one();
    }
    /*
   * 园长老师家长登录--都是使用phone和pd来样张的
   */
    public function  CheckAndSetPd($id, $password, $new_pd)
    {
        try {
            $ErrCode = HintConst::$Zero;
            $Message = HintConst::$Success;
            $Content = HintConst::$NULLARRAY;
            $oa = new OtherAccess();
            $info = json_decode($oa->CheckandsetpdA());
            if ($info->ErrCode == HintConst::$Zero) {
                $mo = $this->findId($id);
                $mo->password = $new_pd;
                $mo->save(false);
            } else {
                $ErrCode = $info->ErrCode;
                $Message = $info->Message;
            }
            return array("ErrCode" => $ErrCode, "Message" => $Message, "Content" => $Content);
        } catch (Exception $e) {
            return array("ErrCode" => HintConst::$No_success, "Message" => HintConst::$NULL, "Content" => HintConst::$NULLARRAY);
        }
    }
    /*
     * 园长老师家长登录--都是使用phone和pd来样张的
     */
    public function  LoginA($phone, $password, $role)
    {
        try {
            if (!Yii::$app->session->isActive) {
                Yii::$app->session->open();
            }
            //todo:first onepoint
            if (!isset($_REQUEST['phone']) || !isset($_REQUEST['password'])) {
                $_REQUEST['phone'] = $phone;
                $_REQUEST['password'] = $password;
            }
            $ErrCode = HintConst::$Zero;
            $Message = HintConst::$Success;
            $Content = HintConst::$NULLARRAY;
            $mc_name = $this->getMcName() . 'LoginA' . json_encode(func_get_args());
            if ($val = $this->mc->get($mc_name)) {
                $Content = $val;
                Yii::$app->session['custominfo'] = $Content;
            } else {
                $oa = new OtherAccess();
                $info = json_decode($oa->LoginA());
                if ($info->ErrCode == HintConst::$Zero) {
                    $id = $info->Content->info->custom->id;
                    $custom = $this->findId($id);
                    if (count($custom) == 0) {
                        $ErrCode = HintConst::$NoRecord;
                        $Message = "没有此用户或者密码错误,请核查";
                    } else {
                        $sch_id = $custom->school_id;
                        $sch = new Schools();
                        if ($sch->checkPassed($sch_id) == false) {
                            $ErrCode = HintConst::$SchoolNoPassed;
                            $Message = "学校没有通过审核";
                        } elseif ($custom->ispassed != HintConst::$YesOrNo_YES) {
                            $ErrCode = HintConst::$NoPassed;
                            $Message = "没有通过审核";
                        } elseif ($custom->isdeleted == HintConst::$YesOrNo_YES) {
                            $ErrCode = HintConst::$YesDeleted;
                            $Message = "用户已经被删除了";
                        } elseif ($custom->isout == HintConst::$YesOrNo_YES) {
                            $ErrCode = HintConst::$YesOut;
                            $Message = "用户的使用期限已经过了";
                        } else {
                            if ($custom->cat_default_id == $role) {
                                if ($role == HintConst::$ROLE_HEADMASTER) {
                                    if ($custom->school_id == 0) {
                                        $ErrCode = HintConst::$CustomNoSchoolId;
                                        $Message = "没有设置school_id";
                                    } else {
                                        Yii::$app->session['custominfo'] = $this->setCustomInfo($custom->attributes, $info->Content);
                                        $s = $custom->attributes['phone'] . ',' . $custom->attributes['password'];
                                        $this->setCookieForSfkey($s, $role);
                                        $Content = Yii::$app->session['custominfo'];
                                    }
                                } else {
                                    if ($custom->school_id == 0 || $custom->class_id == 0) {
                                        $ErrCode = HintConst::$CustomNoClassId;
                                        $Message = "没有设置school_id和class_id";
                                    } else {
                                        Yii::$app->session['custominfo'] = $this->setCustomInfo($custom->attributes, $info->Content);
                                        $s = $custom->attributes['phone'] . ',' . $custom->attributes['password'];
                                        $this->setCookieForSfkey($s, $role);
                                        $Content = Yii::$app->session['custominfo'];
                                    }
                                }
                            } else {
                                $ErrCode = HintConst::$CustomTypeErr;
                                $Message = "用户类型错误";
                            }
                        }
                    }
                } else {
                    $ErrCode = $info->ErrCode;
                    $Message = $info->Message;
                }
                $this->mc->add($mc_name, $Content);
            }
            if (is_object($Content)) {
                $this->upUptime($Content->custom->id);
                return array("ErrCode" => $ErrCode, "Message" => $Message, "Content" => $Content->custom);
            } else {
                return array("ErrCode" => $ErrCode, "Message" => $Message, "Content" => HintConst::$NULLARRAY);
            }
        } catch (Exception $e) {
            $ana = new BaseAnalyze();
            $ana->writeToAnal('LoginA exception:' . $e->getMessage());
            return array("ErrCode" => HintConst::$No_success, "Message" => $Message, "Content" => HintConst::$NULLARRAY);
        }
    }
    public function setCookieForSfkey($s, $role)
    {
        $au = new Authen();
        setcookie('PHPSESSID', Yii::$app->session->id);
        setcookie('sfkey', $au->getsfkey($s));
        setcookie('role', $role);
    }
    public function ChecksfkeyCheck()
    {
        $sfkey = !empty($_REQUEST['sfkey']) ? $_REQUEST['sfkey'] : '';
        $role = !empty($_REQUEST['role']) ? $_REQUEST['role'] : '';
        return $this->Check_sfkeyCheck($sfkey, $role);
    }
    public function Check_sfkeyCheck($sfkey, $role)
    {
        $ErrCode = HintConst::$Zero;
        $sfkey = trim($sfkey);
        if ($sfkey == '') {
            $ErrCode = HintConst::$No_sfkey;
            $Message = "没有sfkry参数";
        } else {
            $result = $this->Checksfkey($sfkey, $role);
            return $result;
        }
        if ($ErrCode != HintConst::$Zero) {
            $Content = HintConst::$NULLARRAY;
            echo(CommonFun::json($ErrCode, $Message, $Content));
        }
    }
    protected function  Checksfkey($sfkey, $role)
    {
        $au = new Authen();
        if ($r = $au->checksfkey($sfkey)) {
            $user = explode(',', $r);
            return $this->LoginA($user[0], $user[1], $role);
        } else {
            return array("ErrCode" => HintConst::$NoRecord, "Message" => 'this sfkey is error', "Content" => HintConst::$NULLARRAY);
        }
    }
    /**
     * @param $id
     * @return string
     * start with up :no flush
     */
    public function upUptime($id)
    {
        $d['updatetime'] = CommonFun::getCurrentDateTime();
        return $this->updateMultiF($id, $d);
    }
    /*
     * //园长添加教师的信息,在返回的group中也有,
     */
    public function addCustom($logo, $name_zh, $phone, $description, $iscansend, $isstar, $cat_default_id)
    {
        if (!$this->checkSession()) {
            $ErrCode = HintConst::$NoSession;
            $Message = HintConst::$Success;
            $Content = HintConst::$NULLARRAY;
        } else {
            $oa = new OtherAccess();
            $info = json_decode($oa->getNewUser(), true);
            if (count($this->getRecordOne(HintConst::$Field_id . "=" . $info['Content']['id'])["Content"]) != 0) {
                $ErrCode = HintConst::$AlreadExist;
                $Message = HintConst::$NULL;
                $Content = HintConst::$NULLARRAY;
            } else {
                $custom = new self();
                $custom->id = $info['Content']['id'];
                $custom->logo = $logo;
                $custom->name_zh = $name_zh;
                $custom->phone = trim($phone);
                $custom->description = $description;
                $custom->ispassed = HintConst::$YesOrNo_YES;
                $custom->isdeleted = HintConst::$YesOrNo_NO;
                $custom->isout = HintConst::$YesOrNo_NO;
                $custom->iscansend = $iscansend;
                $custom->isstar = $isstar;
                $custom->school_id = Yii::$app->session['custominfo']->custom->school_id;
                $custom->cat_default_id = $cat_default_id;
                $custom->password = CommonFun::encrypt(HintConst::$DefPD);
                $custom->createtime = CommonFun::getCurrentDateTime();
                $custom->updatetime = CommonFun::getCurrentDateTime();
                $custom->starttime = CommonFun::getCurrentDateTime();
                $custom->endtime = CommonFun::getCurrentDateTime();
                $custom->save(false);
                $ErrCode = HintConst::$Zero;
                $Message = HintConst::$Success;
                $id = $custom->attributes['id'];
                $where = HintConst::$Field_id . "=$id";
                $new_record = $this->getRecordOne($where)["Content"];
                $Content = $new_record;
            }
        }
        return array("ErrCode" => $ErrCode, "Message" => $Message, "Content" => $Content);
    }
    /*
    * //家长端家长添加的信息
    */
    public function addCustomParent($data)
    {
        $Message = HintConst::$NULL;
        $Content = HintConst::$NULLARRAY;
        $oa = new OtherAccess();
        $info = json_decode($oa->getNewUser(2), true);
        if (count($this->getRecordOne(HintConst::$Field_id . "=" . $info['Content']['id'])["Content"]) != 0) {
            $ErrCode = HintConst::$PhoneAlreadExist;
        } elseif (count((new Schools())->getRecordOne(HintConst::$Field_id . "=" . $data[HintConst::$Field_school_id])["Content"]) == 0) {
            $ErrCode = HintConst::$NoSchoolId_Record;
        } elseif (count((new Classes())->getRecordOne(HintConst::$Field_school_id . "=" . $data[HintConst::$Field_school_id] . " and " . HintConst::$Field_id . "=" . $data[HintConst::$Field_class_id])["Content"]) == 0) {
            $ErrCode = HintConst::$NoClassesId_Record;
        } else {
            $custom = new self();
            foreach ($data as $k => $v) {
                if ($k == HintConst::$Field_password) {
                    $custom->$k = CommonFun::encrypt($v);
                } else {
                    $custom->$k = trim($v);
                }
            }
            $custom->id = $info['Content']['id'];
            $custom->ispassed = HintConst::$YesOrNo_YES;
            $custom->isdeleted = HintConst::$YesOrNo_NO;
            $custom->isout = HintConst::$YesOrNo_NO;
            $custom->iscansend = HintConst::$YesOrNo_NO;
            $custom->isstar = HintConst::$YesOrNo_NO;
            $custom->createtime = CommonFun::getCurrentDateTime();
            $custom->updatetime = CommonFun::getCurrentDateTime();
            $custom->starttime = CommonFun::getCurrentDateTime();
            $custom->endtime = CommonFun::getCurrentDateTime();
            $custom->save(false);
            $ErrCode = HintConst::$Zero;
            $Message = HintConst::$Success;
            $id = $custom->attributes['id'];
            $where = HintConst::$Field_id . "=$id";
            $new_record = $this->getRecordOne($where)["Content"];
            $Content = $new_record;
            $this->LoginA($data[HintConst::$Field_phone], CommonFun::encrypt($data[HintConst::$Field_password]), HintConst::$ROLE_PARENT);
        }
        return array("ErrCode" => $ErrCode, "Message" => $Message, "Content" => $Content);
    }
    /*
     * //获得登录者的相关信息,在返回的group中也有,
     */
    public function GetcustominfoAH()
    {
        return array("ErrCode" => HintConst::$Zero, "Message" => HintConst::$Success, "Content" => Yii::$app->session['custominfo']->custom);
    }
    /*
    * 老师重置家长密码
    */
    public function  RestparentpdAT($school_code, $phone, $password)
    {
    }
    /*
     * 更新老师的class_id
     */
    public function updateClassId($id, $class_id)
    {
        $this->updateF($id, HintConst::$Field_class_id, $class_id);
    }
    public function getSchoolCondition($d)
    {
        $key = $val = "";
        $len = sizeof($d);
        foreach ($d as $k) {
            if (--$len) {
                $key .= "school_id=$k or ";
            } else {
                $key .= "school_id=$k";
            }
        }
        return $key;
    }
    public function getClassCondition($d)
    {
        $key = $val = "";
        $len = sizeof($d);
        foreach ($d as $k) {
            if (--$len) {
                $key .= "class_id=$k or ";
            } else {
                $key .= "class_id=$k";
            }
        }
        return $key;
    }
    public function  getSum_School($school)
    {
        if (sizeof($school) > 0) {
            return Customs::find()
                ->where($this->getSchoolCondition($school))
                ->count();
        }
        return 0;
    }
    public function  getSum_School_Teacher($school)
    {
        if (sizeof($school) > 0) {
            return Customs::find()
                ->where($this->getSchoolCondition($school))
                ->andWhere('cat_default_id=' . HintConst::$ROLE_TEACHER)
                ->count();
        }
        return 0;
    }
    public function  getSum_School_Parent($school)
    {
        if (sizeof($school) > 0) {
            return Customs::find()
                ->where($this->getSchoolCondition($school))
                ->andWhere('cat_default_id=' . HintConst::$ROLE_PARENT)
                ->count();
        }
        return 0;
    }
    public function  getSum_Class($class)
    {
        if (sizeof($class) > 0) {
            return Customs::find()
                ->where($this->getClassCondition($class))
                ->count();
        }
        return 0;
    }
    public function getHeadmastToken()
    {
        $token = [];
        $school_id = $this->getCustomSchool_id();
        $mc_name = $this->getMcName() . 'getHeadmastToken' . $school_id;
        if ($val = $this->mc->get($mc_name)) {
            $q = $val;
        } else {
            $q = Customs::find()->asArray()
                ->select($this->sel_push)
                ->where("school_id=$school_id and cat_default_id=207 and token!=''")
                ->all();
            $this->mc->add($mc_name, $q);
        }
        $this->arrpush($token, $q);
        return $token;
    }
    //commbine token
    public function getToken($school, $class = [], $user = [], $role = 0)
    {
        $token = [];
        if (count($school) > 0) {
            foreach ($school as $k) {
                $this->getTokenBySchool($token, $k, $role);
            }
        }
        if (count($class) > 0) {
            foreach ($class as $k) {
                $this->getTokenByClass($token, $k, $role);
            }
        }
        if (count($user) > 0) {
            foreach ($user as $k) {
                $this->getTokenByUser($token, $k);
            }
        }
        return $token;
    }
    protected function getTokenBySchool(&$token, $school_id, $role = 0)
    {
        $mc_name = $this->getMcName() . 'getTokenBySchool' . $school_id . $role;
        if ($val = $this->mc->get($mc_name)) {
            $q = $val;
        } else {
            $role = CatDef::getCatFromeObj($role);
            if ($role != 0) {
                $q = Customs::find()->asArray()
                    ->select($this->sel_push)
                    ->where("cat_default_id=$role and school_id=$school_id and token!=''")
                    ->all();
            } else {
                $q = Customs::find()->asArray()
                    ->select($this->sel_push)
                    ->where("school_id=$school_id and token!=''")
                    ->all();
            }
            $this->mc->add($mc_name, $q);
        }
        $this->arrpush($token, $q);
    }
    protected function getTokenByClass(&$token, $class_id, $role)
    {
        $mc_name = $this->getMcName() . 'getTokenByClass' . $class_id . $role;
        if ($val = $this->mc->get($mc_name)) {
            $q = $val;
        } else {
            $role = CatDef::getCatFromeObj($role);
            if ($role != 0) {
                $q = Customs::find()->asArray()
                    ->select($this->sel_push)
                    ->where("cat_default_id=$role and class_id=$class_id and token!=''")
                    ->all();
            } else {
                $q = Customs::find()->asArray()
                    ->select($this->sel_push)
                    ->where("class_id=$class_id and token!=''")
                    ->all();
            }
            $this->mc->add($mc_name, $q);
        }
        $this->arrpush($token, $q);
    }
    protected function getTokenByUser(&$token, $user_id)
    {
        $mc_name = $this->getMcName() . 'getTokenByUser' . $user_id;
        if ($val = $this->mc->get($mc_name)) {
            $q = $val;
        } else {
            $q = Customs::find()->asArray()
                ->select($this->sel_push)
                ->where("id=$user_id and token!=''")
                ->all();
            $this->mc->add($mc_name, $q);
        }
        $this->arrpush($token, $q);
    }
    protected function arrpush(&$token, &$q)
    {
        if (count($q) > 0) {
            array_push($token, $q);
        }
    }
    public function getSCIByRftoken($sc)
    {
        $mc_name = $this->getMcName() . 'getSCIByRftoken' . $sc;
        if ($val = $this->mc->get($mc_name)) {
            $q = $val;
        } else {
            $q = Customs::find()
                ->asArray()
                ->select('id,school_id,class_id')
                ->where(['rftoken' => $sc])
                ->one();
            $this->mc->add($mc_name, $q);
        }
        return $q;
    }
    public function UpdatephoneA()
    {
        try {
            $oa = new OtherAccess();
            $re = $oa->UpdatephoneA();
            $info = json_decode($re);
            if ($info->ErrCode == HintConst::$Zero) {
                $id = !empty($_REQUEST['id']) ? $_REQUEST['id'] : '';
                $v = !empty($_REQUEST['phone']) ? $_REQUEST['phone'] : '';
                return $this->updateF($id, HintConst::$Field_phone, trim($v));
            } else {
                return $re;
            }
        } catch (Exception $e) {
            return json_encode(array("ErrCode" => HintConst::$No_success, "Message" => HintConst::$NULL, "Content" => HintConst::$NULLARRAY));
        }
    }
    public function UpdatenamezhA()
    {
        try {
            $oa = new OtherAccess();
            $re = $oa->UpdatenamezhA();
            $info = json_decode($re);
            if ($info->ErrCode == HintConst::$Zero) {
                $id = !empty($_REQUEST['id']) ? $_REQUEST['id'] : '';
                $v = !empty($_REQUEST['name_zh']) ? $_REQUEST['name_zh'] : '';
                return $this->updateF($id, HintConst::$Field_name_zh, $v);
            } else {
                return $re;
            }
        } catch (Exception $e) {
            $this->execpt_nosuccess();
        }
    }
    public function UpdatepasswordA()
    {
        try {
            $oa = new OtherAccess();
            $re = $oa->UpdatepasswordA();
            $info = json_decode($re);
            if ($info->ErrCode == HintConst::$Zero) {
                $id = !empty($_REQUEST[HintConst::$Field_id]) ? $_REQUEST[HintConst::$Field_id] : '';
                $v = !empty($_REQUEST[HintConst::$Field_password]) ? $_REQUEST[HintConst::$Field_password] : '';
                return $this->updateF($id, HintConst::$Field_password, $v);
            } else {
                return $re;
            }
        } catch (Exception $e) {
            return json_encode(array("ErrCode" => HintConst::$No_success, "Message" => HintConst::$NULL, "Content" => HintConst::$NULLARRAY));
        }
    }
    public function UpdatetokenA()
    {
        try {
            $id = !empty($_REQUEST['id']) ? $_REQUEST['id'] : '';
            $d['token_type'] = !empty($_REQUEST['token_type']) ? $_REQUEST['token_type'] : 0;
            $d['token'] = !empty($_REQUEST['token']) ? $_REQUEST['token'] : '';
            if ($id == 0 || empty($id) || !is_numeric($id)) {
                $ErrCode = HintConst::$NoId;
            } elseif (empty($d['token'])) {
                $ErrCode = HintConst::$No_token;
            } else {
                return $this->Update_tokenA($id, $d);
            }
            return json_encode(array("ErrCode" => $ErrCode, "Message" => '', "Content" => HintConst::$NULLARRAY));
        } catch (Exception $e) {
            return json_encode(array("ErrCode" => HintConst::$No_success, "Message" => HintConst::$NULL, "Content" => HintConst::$NULLARRAY));
        }
    }
    public function Update_tokenA($id, $d)
    {
        return $this->updateMultiF($id, $d);
    }
    public function getCustomStatus($school_id = 0)
    {
        $mc_name = $this->getMcName() . 'getClassStatus' . $school_id;
        if ($val = $this->mc->get($mc_name)) {
            $d = $val;
        } else {
            $query = new Query();
            $data = $query
                ->select('id,name_zh,cat_default_id,,phone,createtime')
                ->from('customs')
                ->where("school_id=$school_id")
                ->all();
            $countQuery = clone $query;
            $pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => 20, 'pageSizeLimit' => 1]);
            $d['pages'] = $pages;
            $data = $query->offset($pages->offset)
                ->orderby(['id' => SORT_DESC])
                ->limit($pages->limit)
                ->all();
            $d['data'] = $data;
            $this->mc->add($mc_name, $d);
        }
        return $d;
    }
    public function freeTeacher($id)
    {
        Customs::updateAll(['class_id' => HintConst::$ZeroInt], "cat_default_id=208 and class_id=$id");
    }
    public function getNum($school_id, $startdate, $enddate)
    {
        $mc_name = $this->getMcName() . 'cusgetNum' . json_encode(func_get_args());
        if ($val = $this->mc->get($mc_name)) {
            $d = $val;
        } else {
            $d = $this->find()->asArray()
                ->select('count(id) as num')
                ->where("updatetime between '$startdate' and '$enddate'");
            if ($school_id) {
                $d = $d->andWhere("school_id=$school_id");
            }
            $d = $d->one();
            $this->mc->add($mc_name, $d);
        }
        return $d;
    }
    public function  getManagerSes($sch_id)
    {
        return Customs::find()->asarray()
            ->where(['school_id' => $sch_id, 'cat_default_id' => HintConst::$ROLE_HEADMASTER])
            ->one();
    }
    public function addPoint($e)
    {
        $this->increaseF(self::get_CustomId($e->data['custom_id']), 'points', $e->data['num']);
    }
    public function addCoin($e)
    {
        $this->increaseF(self::get_CustomId($e->data['custom_id']), 'coins', $e->data['num']);
    }
    protected function get_CustomId($id)
    {
        return ($id != 0) ? $id : parent::getCustomId();
    }
    public function Rankofhead()
    {
        $inalllocation = null;
        $inselflocation = null;
        $this->Rankofhl($inalllocation, $inselflocation);
        $rank['inalllocation'] = 0;
        $rank['inselflocation'] = 0;
        foreach ($inalllocation as $k => $v) {
            if ($v['id'] == $this->getCustomId()) {
                $rank['inalllocation'] = $k + 1;
                $rank['coins'] = $v['coins'];
                break;
            }
        }
        foreach ($inselflocation as $k => $v) {
            if ($v['id'] == $this->getCustomId()) {
                $rank['inselflocation'] = $k + 1;
                break;
            }
        }
        return $rank;
    }
    public function Rankofhl(&$inalllocation, &$inselflocation)//list
    {
        $d['role'] = $dd['role'] = 'headmaster';
        $d['school_id'] = $dd['school_id'] = 0;
        $d['class_id'] = $dd['class_id'] = 0;
        $d['location_id'] = 0;
        $dd['location_id'] = $this->getCustomCity();
        $inalllocation = $this->Rank($d);
        $inselflocation = $this->Rank($dd);
    }
    public function Rankofteacher()
    {
        $inschool = null;//rand of teacher in self school
        $this->Rankoftl($inschool);
        $rank['inschool'] = 0;
        $rank['points'] = 0;
        foreach ($inschool as $k => $v) {
            if ($v['id'] == $this->getCustomId()) {
                $rank['inschool'] = $k + 1;
                $rank['points'] = $v['points'];
                break;
            }
        }
        return $rank;
    }
    public function Rankoftl(&$inschool)
    {
        $d['role'] = 'teacher';
        $d['school_id'] = $this->getCustomSchool_id();
        $d['class_id'] = 0;
        $d['location_id'] = 0;
        $inschool = $this->Rank($d);//rand of teacher in self school
    }
    public function Rankofparent($id)
    {
        $inschool = null;
        $inclass = null;
        $this->Rankofpl($inschool, $inclass);
        $rank['inschool'] = 0;
        $rank['inclass'] = 0;
        $rank['points'] = 0;
        foreach ($inschool as $k => $v) {
            if ($v['id'] == $id) {
                $rank['inschool'] = $k + 1;
                $rank['points'] = $v['points'];
                break;
            }
        }
        foreach ($inclass as $k => $v) {
            if ($v['id'] == $id) {
                $rank['inclass'] = $k + 1;
                break;
            }
        }
        return $rank;
    }
    public function Rankofpl(&$inschool, &$inclass)//list
    {
        $d['role'] = $dd['role'] = 'parent';
        $d['school_id'] = $dd['school_id'] = $this->getCustomSchool_id();
        $d['class_id'] = 0;
        $dd['class_id'] = $this->getCustomClass_id();
        $d['location_id'] = $dd['location_id'] = 0;
        $inschool = $this->Rank($d);
        $inclass = $this->Rank($dd);
    }
    public function Rank($d)
    {
        $mc_name = 'Rank' . json_encode($d) . $this->getMcName();
        if ($val = $this->mc->get($mc_name)) {
            $r = $val;
        } else {
            $r = Customs::find()->asArray();
            if ($d['role'] == 'headmaster') {
                $r = $r->select($this->sel_score_h);
            } else {
                $r = $r->select($this->sel_score_t_p)
                    ->leftJoin('classes', 'classes.id=customs.class_id');
            }
            $r = $r->leftJoin('schools', 'schools.id=customs.school_id')
                ->where(['schools.ispassed' => HintConst::$YesOrNo_YES, 'schools.isdeleted' => HintConst::$YesOrNo_NO, 'customs.cat_default_id' => CatDef::$role2[$d['role']], 'customs.ispassed' => CatDef::$yesno['yes'], 'customs.isdeleted' => CatDef::$yesno['no']]);
            if ($d['school_id'] > 0) {
                $r = $r->andWhere(['customs.school_id' => $d['school_id']]);
            }
            if ($d['class_id'] > 0) {
                $r = $r->andWhere('customs.class_id=' . $d['class_id']);
            }
            if ($d['location_id'] > 0) {
                $r = $r->andWhere(['schools.zh_citie_id' => $d['location_id']]);
            }
            if ($d['role'] != 'headmaster') {
                $r = $r->orderBy('customs.points DESC');
            } else {
                $r = $r->orderBy('customs.coins DESC');
            }
            $r = $r->all();
            $this->mc->add($mc_name, $r);
        }
        return $r;
    }
    public function checkCoin($coin)
    {
        $r = $this->findId($this->getCustomId());
        if ($r !== null) {
            if ($r->coins >= $coin) {
                $r->coins -= $coin;
                $r->save();
                return true;
            }
        } else {
            return false;
        }
    }
    public function Custinfo()
    {
        $ErrCode = HintConst::$Zero;
        $Content = HintConst::$NULLARRAY;
        $d['id'] = isset($_REQUEST['id']) ? $_REQUEST['id'] : '';
        if (empty($d['id']) || !is_numeric($d['id'])) {
            $ErrCode = HintConst::$NoId;
        } else {
            $Content = $this->Cust_info($d['id']);
        }
        $result = ['ErrCode' => $ErrCode, 'Message' => HintConst::$Success, 'Content' => $Content];
        return json_encode($result);
    }
    public function Cust_info($id)
    {
        $mc_name = $this->getMcName() . 'Cust_info' . $id;
        if ($val = $this->mc->get($mc_name)) {
            $re = $val;
        } else {
            $cust = $this->findId($id);
            if ($cust !== null) {
                $school = (new Schools())->findId($cust->school_id);
                $cust = (array)$cust->attributes;
                $cust['school_name'] = $school->name;
                $re = $cust;
            } else {
                $re = HintConst::$NULLARRAY;
            }
            $this->mc->add($mc_name, $re);
        }
        return $re;
    }
    public function Edit()
    {
        $tn = isset($_REQUEST['tn']) ? $_REQUEST['tn'] : '';
        $id = isset($_REQUEST['id']) ? $_REQUEST['id'] : '';
        $field = isset($_REQUEST['field']) ? $_REQUEST['field'] : '';
        $val = isset($_REQUEST['val']) ? $_REQUEST['val'] : '';
        if (empty($tn) || empty($id) || empty($field) || !is_numeric($id)) {
            return json_encode(array("ErrCode" => HintConst::$ParmaWrong, "Message" => '参数错误', "Content" => HintConst::$NULLARRAY));
        } else {
            return (new BaseEdit())->edit($tn, $id, $field, $val);
        }
    }
    public function Getprop()
    {
        $tn = isset($_REQUEST['tn']) ? $_REQUEST['tn'] : '';
        $id = isset($_REQUEST['id']) ? $_REQUEST['id'] : '';
        $field = isset($_REQUEST['field']) ? $_REQUEST['field'] : '';
        if (empty($tn) || empty($id) || empty($field) || !is_numeric($id)) {
            return json_encode(array("ErrCode" => HintConst::$ParmaWrong, "Message" => '参数错误', "Content" => HintConst::$NULLARRAY));
        } else {
            return (new BaseEdit())->getProp($tn, $id, $field);
        }
    }
    public function Getcusbyf()
    {
        $ErrCode = HintConst::$Zero;
        $Content = HintConst::$NULLARRAY;
        $f = isset($_REQUEST['field']) ? $_REQUEST['field'] : '';
        $v = isset($_REQUEST['val']) ? $_REQUEST['val'] : '';
        $m = isset($_REQUEST['more']) ? $_REQUEST['more'] : 0;
        if (empty($f)) {
            $ErrCode = HintConst::$No_field;
        } elseif (empty($v)) {
            $ErrCode = HintConst::$NoVlaue;
        } else {
            $Content = self::Get_cusbyf($f, $v, $m);
        }
        $result = ['ErrCode' => $ErrCode, 'Message' => HintConst::$Success, 'Content' => $Content];
        return json_encode($result);
    }
    public function Get_cusbyf($f, $v, $m = 0)
    {
        $mc_name = $this->getMcName() . 'Get_cusbyf' . json_encode(func_get_args());
        if ($val = $this->mc->get($mc_name)) {
            $r = $val;
        } else {
            $r = self::find()->asArray()
                ->select($this->sel_cus)
                ->where([$f => $v]);
            if (!$m) {
                $r = $r->one();
            } else {
                $r = $r->all();
            }
            $this->mc->add($mc_name, $r);
        }
        return $r;
    }
    public function Get_cusbyfinschool($f, $v, $m = 0)
    {
        $mc_name = $this->getMcName() . 'Get_cusbyfinschool' . json_encode(func_get_args());
        if ($val = $this->mc->get($mc_name)) {
            $r = $val;
        } else {
            $r = self::find()->asArray()
                ->select($this->sel_cus)
                ->where(['school_id' => $this->getCustomSchool_id(), $f => $v]);
            if (!$m) {
                $r = $r->one();
            } else {
                $r = $r->all();
            }
            $this->mc->add($mc_name, $r);
        }
        return $r;
    }
    public function getFl()
    {
        $ErrCode = HintConst::$Zero;
        $Content = HintConst::$NULLARRAY;
        $id = isset($_REQUEST['id']) ? $_REQUEST['id'] : $this->getCustomId();
        if (empty($id)) {
            $ErrCode = HintConst::$No_field;
        } else {
            $Content = self::get_Fl($id);
        }
        $result = ['ErrCode' => $ErrCode, 'Message' => HintConst::$Success, 'Content' => $Content];
        return json_encode($result);
    }
    public function get_Fl($id)
    {
        $mc_name = $this->getMcName() . 'get_Flower' . json_encode(func_get_args());
        if ($val = $this->mc->get($mc_name)) {
            $r = $val;
        } else {
            $r = self::find()->asArray()
                ->select($this->sel_flower)
                ->where(['id' => $id])->one();
            $this->mc->add($mc_name, $r);
        }
        return $r;
    }
    public function Getisde()
    {
        return json_encode(['ErrCode' => HintConst::$Zero, 'Message' => HintConst::$Success, 'Content' => self::Get_cusbyfinschool('isdeleted', HintConst::$YesOrNo_YES, 1)]);
    }
    public function getRankForPoints($role)
    {
        $school_id = $this->getCustomSchool_id();
        $mc_name = $this->getMcName() . 'getRankForPoints' . $school_id . $role;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $mo = self::find()->asArray()
                ->from('customs as c')
                ->select('c.id,c.name_zh,c.points,cl.name as class_name')
                ->leftJoin('classes as cl', 'cl.id=c.class_id')
                ->where(['c.school_id' => $school_id, 'c.cat_default_id' => $role, 'c.ispassed' => HintConst::$YesOrNo_YES, 'c.isdeleted' => HintConst::$YesOrNo_NO])
                ->orderBy('c.points desc')
                ->all();
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function getcustominclass($class_id)
    {
        $mc_name = $this->getMcName() . 'getcustominclass' . $class_id;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $mo = self::find()->asArray()
                ->select('id')
                ->where(['class_id' => $class_id])
                ->all();
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function Getlifelable()
    {
        $ErrCode = HintConst::$Zero;
        $Content = HintConst::$NULLARRAY;
        $class_id = isset($_REQUEST['class_id']) ? trim($_REQUEST['class_id']) : '';
        $lable = isset($_REQUEST['lable']) ? trim($_REQUEST['lable']) : '';
        $date = isset($_REQUEST['date']) ? trim($_REQUEST['date']) : CommonFun::getCurrentDate();
        if (empty($class_id) || !is_numeric($class_id)) {
            $ErrCode = HintConst::$NoClassesId;
        }
        if (empty($lable) || !is_numeric($lable)) {
            $ErrCode = HintConst::$No_lable;
        } else {
            $custom_inclass = $this->getcustominclass($class_id);
            $Content['class'] = [];
            $Content['custom'] = [];
            if ($custom_inclass) {
                $Content['class'] = (new ClassesDaily())->getClassLifeLable($class_id, $lable, $date);
                $Content['custom'] = (new CustomsDaily())->getCustomLifeLable($custom_inclass, $lable, $date);
            }
        }
        return json_encode(['ErrCode' => $ErrCode, 'Message' => HintConst::$WEB_JYQ, 'Content' => $Content]);
    }
    public function getHeadList($role, $school_id, $class_id = 0)
    {
        $mc_name = 'getCustomList' . json_encode(func_get_args()) . $this->getMcName();
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $qu = new Query();
            $mo = $qu->select($this->sel_headlist)
                ->from('customs as cu')
                ->where([
                    'cu.cat_default_id' => $role,
                    'cu.school_id' => $school_id,
                    'cu.ispassed' => HintConst::$YesOrNo_YES,
                    'cu.isout' => HintConst::$YesOrNo_NO,
                    'cu.isdeleted' => HintConst::$YesOrNo_NO
                ]);
            if ($class_id) {
                $mo = $mo->andWhere(['cu.class_id' => $class_id]);
            }
            $mo = $mo->orderBy("cu.name_zh asc")
                ->all();
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function getCustomList($role, $school_id, $class_id = 0)
    {
        $mc_name = 'getCustomList' . json_encode(func_get_args()) . $this->getMcName();
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $qu = new Query();
            $mo = $qu->select($this->sel_customlist)
                ->from('customs as cu');
            if ($class_id) {
                $mo = $mo->leftJoin('classes as cl', 'cl.id=cu.class_id');
            }
            $mo = $mo->where([
                'cu.cat_default_id' => $role,
                'cu.school_id' => $school_id,
                'cu.ispassed' => HintConst::$YesOrNo_YES,
                'cu.isout' => HintConst::$YesOrNo_NO,
                'cu.isdeleted' => HintConst::$YesOrNo_NO
            ]);
            if ($class_id) {
                $mo = $mo->andWhere(['cl.isgraduated' => HintConst::$YesOrNo_NO, 'cu.class_id' => $class_id]);
            }
            $mo = $mo->orderBy("cu.name_zh asc")
                ->all();
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function  getHeadmastInfo($school_id)
    {
        $mc_name = 'getHeadmastInfo' . $school_id . $this->getMcName();
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $mo = self::find()->asArray()
                ->where(['school_id' => $school_id, 'customs.cat_default_id' => HintConst::$ROLE_HEADMASTER])->all();
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function mydel()
    {
        $id = isset($_REQUEST['id']) ? trim($_REQUEST['id']) : '';
        if (empty($id) || !is_numeric($id)) {
            $ErrCode = HintConst::$NoId;
        } else {
            $sql = "DELETE FROM customs WHERE id=$id";
            $sql2 = "UPDATE classes SET teacher_id=0 WHERE teacher_id=$id";
            $ErrCode = (new TransAct())->trans($sql, $sql2);
        }
        $result = ['ErrCode' => $ErrCode, 'Message' => HintConst::$Success, 'Content' => HintConst::$NULLARRAY];
        return json_encode($result);
    }
    public function  getRelativeUserId($user_id)
    {
        $mc_name = $this->getMcName() . 'getRelativeUserId' . $user_id;
        $mo = null;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $check = $this->getFeild('id', $user_id);
            if ($check !== null) {
                $query = $this->find()->asArray()
                    ->select('id')
                    ->where(['school_id' => $check->school_id, 'cat_default_id' => HintConst::$ROLE_HEADMASTER])
                    ->orWhere(['class_id' => $check->class_id, 'cat_default_id' => HintConst::$ROLE_TEACHER])
                    ->all();
                $mo = $this->removeKey($query, 'id');
            }
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function getRUofHead($school_id)//relative head
    {
        return;
    }
    public function getRUofTeacher($class_id)//relative teacher
    {
        return;
    }
    public function getRUofParent($user_id)//relative parent
    {
        return;
    }
    public function  RegCustom()
    {
        $reg['head'] = self::gathor(HintConst::$ROLE_HEADMASTER);
        $reg['teacher'] = self::gathor(HintConst::$ROLE_TEACHER);
        $reg['parent'] = self::gathor(HintConst::$ROLE_PARENT);
        return $reg;
    }
    public function gathor($role)
    {
        $reg['today_login'] = self::logintoday($role);
        $reg['today_create'] = self::regtoday($role);
        $reg['yesterday'] = self::regyesterday($role);
        $reg['week'] = self::regweek($role);
        $reg['sum'] = self::regsum($role);
        return $reg;
    }
    public function logintoday($role)
    {
        $mc_name = $this->getMcName() . 'logintoday' . $role;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $sql = "SELECT COUNT(*) as num FROM customs where cat_default_id=$role AND TO_DAYS(updatetime)=TO_DAYS(now()) ";
            $mo = $this->queryOne($sql);
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function regtoday($role)
    {
        $mc_name = $this->getMcName() . 'regtoday' . $role;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $sql = "SELECT COUNT(*) as num FROM customs where cat_default_id=$role AND TO_DAYS(createtime)=TO_DAYS(now())";
            $mo = $this->queryOne($sql);
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function regyesterday($role)
    {
        $mc_name = $this->getMcName() . 'regyesterday' . $role;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $sql = "SELECT COUNT(*) as num FROM customs where cat_default_id=$role AND TO_DAYS(now())-TO_DAYS(createtime)=1";
            $mo = $this->queryOne($sql);
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function regweek($role)
    {
        $mc_name = $this->getMcName() . 'regweek' . $role;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $sql = "SELECT COUNT(*) as num FROM customs where cat_default_id=$role AND week(createtime)=week(now())";
            $mo = $this->queryOne($sql);
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
    public function regsum($role)
    {
        $mc_name = $this->getMcName() . 'regsum' . $role;
        if ($val = $this->mc->get($mc_name)) {
            $mo = $val;
        } else {
            $sql = "SELECT COUNT(*) as num FROM customs where cat_default_id=$role";
            $mo = $this->queryOne($sql);
            $this->mc->add($mc_name, $mo);
        }
        return $mo;
    }
}